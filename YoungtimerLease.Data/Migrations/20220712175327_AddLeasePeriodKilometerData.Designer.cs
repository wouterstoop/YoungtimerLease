// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YoungtimerLease.Data;

#nullable disable

namespace YoungtimerLease.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220712175327_AddLeasePeriodKilometerData")]
    partial class AddLeasePeriodKilometerData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YoungtimerLease.Domain.Model.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Acceleration0To100")
                        .HasColumnType("float");

                    b.Property<bool?>("AutomaticTransmission")
                        .HasColumnType("bit");

                    b.Property<decimal?>("CatalogValue")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ConstructionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CylinderCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Doors")
                        .HasColumnType("int");

                    b.Property<Guid?>("DriveTrainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DynamicPowerKw")
                        .HasColumnType("int");

                    b.Property<decimal?>("FiscalValue")
                        .HasColumnType("money");

                    b.Property<Guid?>("FuelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfCilinders")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfGears")
                        .HasColumnType("int");

                    b.Property<decimal?>("ReferenceTariff")
                        .HasColumnType("money");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopSpeed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriveTrainId");

                    b.HasIndex("FuelId");

                    b.ToTable("Auto's", (string)null);
                });

            modelBuilder.Entity("YoungtimerLease.Domain.Model.CarLeaseTariff", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LeasePeriodKilometerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CalculateTariff")
                        .HasColumnType("bit");

                    b.Property<decimal?>("FixedLeaseMonthPrice")
                        .HasColumnType("smallmoney");

                    b.HasKey("CarId", "LeasePeriodKilometerId");

                    b.HasIndex("LeasePeriodKilometerId");

                    b.ToTable("Leasetarieven", (string)null);

                    b.HasCheckConstraint("tariffceckconstraint", "FixedLeaseMonthPrice is null OR CalculateTariff=0");
                });

            modelBuilder.Entity("YoungtimerLease.Domain.Model.DriveTrain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Abbreviation");

                    b.HasAlternateKey("Name");

                    b.ToTable("Aandrijving", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0d82820-6547-40b2-87c0-3a8ee62b6cb9"),
                            Abbreviation = "RWD",
                            Name = "Rear-wheel drive"
                        },
                        new
                        {
                            Id = new Guid("4d99c733-29a4-4062-9838-07331f28b3f2"),
                            Abbreviation = "FWD",
                            Name = "Front-wheel drive"
                        },
                        new
                        {
                            Id = new Guid("27d0a389-5f93-4dce-b7e8-4cd85e2b7d51"),
                            Abbreviation = "AWD",
                            Name = "All-wheel drive"
                        });
                });

            modelBuilder.Entity("YoungtimerLease.Domain.Model.Fuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Brandstoffen", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7d71800-cee7-4630-8888-a535ee68169a"),
                            Name = "Petrol"
                        },
                        new
                        {
                            Id = new Guid("60b33eb4-a587-478b-82db-d03fa61683e4"),
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = new Guid("754b46e9-5b9b-47bd-970d-8d8414e22512"),
                            Name = "LPG"
                        });
                });

            modelBuilder.Entity("YoungtimerLease.Domain.Model.LeasePeriodKilometer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("KilometersPerYear")
                        .HasColumnType("int");

                    b.Property<int>("LeasePeriodMonths")
                        .HasColumnType("int");

                    b.Property<decimal?>("TariffCalculationFactor")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.HasIndex("KilometersPerYear", "LeasePeriodMonths")
                        .IsUnique();

                    b.ToTable("LeasePeriodesKilometers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7894c6a-2258-4aa0-8f33-22cf276214e1"),
                            KilometersPerYear = 10000,
                            LeasePeriodMonths = 12,
                            TariffCalculationFactor = 1m
                        },
                        new
                        {
                            Id = new Guid("fa5c3d42-a363-4fa6-a404-95a5b2d4fc7b"),
                            KilometersPerYear = 20000,
                            LeasePeriodMonths = 12,
                            TariffCalculationFactor = 1.3m
                        },
                        new
                        {
                            Id = new Guid("02c68411-ce8b-49ce-94b4-b31951c37fab"),
                            KilometersPerYear = 30000,
                            LeasePeriodMonths = 12,
                            TariffCalculationFactor = 1.5m
                        },
                        new
                        {
                            Id = new Guid("66773e7a-ec64-4a17-b81f-1f7aeaf78082"),
                            KilometersPerYear = 40000,
                            LeasePeriodMonths = 12,
                            TariffCalculationFactor = 1.7m
                        },
                        new
                        {
                            Id = new Guid("e61134ab-9f8a-44f1-b38c-aa024d05ef06"),
                            KilometersPerYear = 10000,
                            LeasePeriodMonths = 24,
                            TariffCalculationFactor = 0.95m
                        },
                        new
                        {
                            Id = new Guid("89bd1aa2-4684-4e29-a3aa-a8a0baaad75b"),
                            KilometersPerYear = 20000,
                            LeasePeriodMonths = 24,
                            TariffCalculationFactor = 1.235m
                        },
                        new
                        {
                            Id = new Guid("ac7f24f6-fbc2-45f0-8b73-617945bce633"),
                            KilometersPerYear = 30000,
                            LeasePeriodMonths = 24,
                            TariffCalculationFactor = 1.425m
                        },
                        new
                        {
                            Id = new Guid("976a427f-c133-4068-abe9-7baa3e85e2b5"),
                            KilometersPerYear = 40000,
                            LeasePeriodMonths = 24,
                            TariffCalculationFactor = 1.615m
                        },
                        new
                        {
                            Id = new Guid("5664ea11-60ff-4ff4-abce-99247bb655bd"),
                            KilometersPerYear = 10000,
                            LeasePeriodMonths = 36,
                            TariffCalculationFactor = 0.9m
                        },
                        new
                        {
                            Id = new Guid("231898b4-2c78-45e9-bebe-0698bd83468d"),
                            KilometersPerYear = 20000,
                            LeasePeriodMonths = 36,
                            TariffCalculationFactor = 1.17m
                        },
                        new
                        {
                            Id = new Guid("fec6d349-05a1-4992-9748-d2ab62fe742d"),
                            KilometersPerYear = 30000,
                            LeasePeriodMonths = 36,
                            TariffCalculationFactor = 1.35m
                        },
                        new
                        {
                            Id = new Guid("4021bc38-0535-4f5c-954b-396b677abeec"),
                            KilometersPerYear = 10000,
                            LeasePeriodMonths = 48
                        },
                        new
                        {
                            Id = new Guid("759e7365-b2bb-4639-a628-f5084a140164"),
                            KilometersPerYear = 20000,
                            LeasePeriodMonths = 48
                        });
                });

            modelBuilder.Entity("YoungtimerLease.Domain.Model.Car", b =>
                {
                    b.HasOne("YoungtimerLease.Domain.Model.DriveTrain", "DriveTrain")
                        .WithMany()
                        .HasForeignKey("DriveTrainId");

                    b.HasOne("YoungtimerLease.Domain.Model.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("FuelId");

                    b.Navigation("DriveTrain");

                    b.Navigation("Fuel");
                });

            modelBuilder.Entity("YoungtimerLease.Domain.Model.CarLeaseTariff", b =>
                {
                    b.HasOne("YoungtimerLease.Domain.Model.Car", "Car")
                        .WithMany("CarLeaseTariffs")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YoungtimerLease.Domain.Model.LeasePeriodKilometer", "LeasePeriodKilometer")
                        .WithMany()
                        .HasForeignKey("LeasePeriodKilometerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("LeasePeriodKilometer");
                });

            modelBuilder.Entity("YoungtimerLease.Domain.Model.Car", b =>
                {
                    b.Navigation("CarLeaseTariffs");
                });
#pragma warning restore 612, 618
        }
    }
}
